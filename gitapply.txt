 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/README.md b/README.md
index 0e835beecbe08d1a7158e457c3f80a11b95282c6..ec9f1601073b0c8635d8125c3182942f6ac92a08 100644
--- a/README.md
+++ b/README.md
@@ -1,43 +1,43 @@
 # 🌍 i18ntk - The Ultimate i18n Translation Management Toolkit
 
 ![i18ntk Logo](docs/screenshots/i18ntk-logo-public.PNG)
 
 **Version:** 1.7.1
 **Last Updated:** 2025-08-10  
 **GitHub Repository:** [vladnoskv/i18ntk](https://github.com/vladnoskv/i18ntk)
 
 [![npm](https://img.shields.io/npm/dt/i18ntk.svg)](https://www.npmjs.com/package/i18ntk) [![npm version](https://badge.fury.io/js/i18ntk.svg)](https://badge.fury.io/js/i18ntk) [![Node.js Version](https://img.shields.io/badge/node-%3E%3D16.0.0-brightgreen.svg)](https://nodejs.org/) [![Downloads](https://img.shields.io/npm/dm/i18ntk.svg)](https://www.npmjs.com/package/i18ntk) [![GitHub stars](https://img.shields.io/github/stars/vladnoskv/i18ntk?style=social)](https://github.com/vladnoskv/i18ntk) 
 [![Socket Badge](https://socket.dev/api/badge/npm/package/i18ntk/1.7.1)](https://socket.dev/npm/package/i18ntk/overview/1.7.1)
 
 **🚀 The fastest way to manage translations across any framework or vanilla JavaScript projects**
 
 **Framework Support:** Auto-detects popular libraries (React i18next, Vue i18n, i18next, Nuxt i18n, Svelte i18n) or works without a framework. i18ntk manages translation files and validation—it does NOT implement translations on pages.
 
 > **Zero dependencies** | **Works with any framework** | **Enterprise-grade security**
 
-> **v1.7.1** – Enhanced security logging, flexible 4-6 digit PIN authentication, configuration stability improvements, and CI/CD silent mode support; maintains 97% speed improvement (**15.38ms** for 200k keys) with zero breaking changes.
+> **v1.7.1** – Enhanced security logging, flexible 4-6 digit PIN authentication, configuration stability improvements, CI/CD silent mode support, and immediate language preference loading; maintains 97% speed improvement (**15.38ms** for 200k keys) with zero breaking changes.
 
 ## 🚀 Quick Start
 
 ```bash
 # Install globally
 npm i i18ntk
 
 # Interactive setup
 npx i18ntk
 
 # Basic commands
 i18ntk analyze --source ./src
 i18ntk complete --source ./src
 i18ntk validate --source ./locales
 ```
 
 ## ⚡ Performance
 
 | Mode | Time (200k keys) | Memory | Package Size |
 |------|------------------|--------|--------------|
 | **Ultra-Extreme** | **15.38ms** | 1.62MB | 115KB-830KB |
 | **Extreme** | **38.90ms** | 0.61MB | 115KB-830KB |
 | Ultra | 336.8ms | 0.64MB | Configurable |
 | Optimized | 847.9ms | 0.45MB | Full package |
 
diff --git a/dev/standardize-i18n-usage-phase2.js b/dev/standardize-i18n-usage-phase2.js
index 9e485df5c7e6ba787850cec63f4a1869b2ff7c40..a2e47987afe8ab1463a3b8c25e4665c596e9fa21 100644
--- a/dev/standardize-i18n-usage-phase2.js
+++ b/dev/standardize-i18n-usage-phase2.js
@@ -65,51 +65,51 @@ function processFile(filePath) {
   
   console.log(`   🔍 Analysis:`, analysis);
   
   let modified = content;
   let hasChanges = false;
   
   // 1. Fix settings-cli.js specific issues
   if (filePath.includes('settings-cli.js')) {
     // Replace the problematic t() function definition with import usage
     if (modified.includes('t(key, params = {}) {') && modified.includes('return t(key, params);')) {
       modified = modified.replace(
         /\/\*\*\s*\n\s*\* Translation helper function\s*\n\s*\*\/\s*\n\s*t\(key, params = \{\}\) \{\s*\n\s*return t\(key, params\);\s*\n\s*\}/m,
         ''
       );
       
       // Ensure proper import
       if (!modified.includes("const { loadTranslations, t } = require('../utils/i18n-helper');")) {
         const importLine = "const { loadTranslations, t } = require('../utils/i18n-helper');";
         if (modified.includes("const { loadTranslations } = require('../utils/i18n-helper');")) {
           modified = modified.replace(
             "const { loadTranslations } = require('../utils/i18n-helper');",
             importLine
           );
         } else {
           // Add after other imports
-          const insertPos = modified.indexOf('loadTranslations(process.env.I18NTK_LANG || \'en\');');
+          const insertPos = modified.indexOf('loadTranslations(process.env.I18NTK_LANG);');
           if (insertPos !== -1) {
             modified = modified.substring(0, insertPos) + importLine + '\n' + modified.substring(insertPos);
           }
         }
       }
       
       hasChanges = true;
       console.log(`   ✅ Fixed settings-cli.js t() definition`);
     }
     
     // Replace this.t( with t(
     if (modified.includes('this.t(')) {
       modified = modified.replace(/this\.t\(/g, 't(');
       hasChanges = true;
       console.log(`   ✅ Replaced this.t() calls with t() in settings-cli.js`);
     }
   }
   
   // 2. Fix recursive t() definition in showHelp methods
   if (modified.includes('const t = this.ui && this.ui.t ? (key) => t(key) :')) {
     modified = modified.replace(
       /const t = this\.ui && this\.ui\.t \? \(key\) => t\(key\) : \(key\) => \{/,
       'const localT = this.ui && this.ui.t ? this.ui.t.bind(this.ui) : (key) => {'
     );
     
diff --git a/dev/standardize-i18n-usage.js b/dev/standardize-i18n-usage.js
index a64e1d616c7f4fb571d45309f3628759277769b7..462d58954bad003df531163bdc6105fb859fd7f7 100644
--- a/dev/standardize-i18n-usage.js
+++ b/dev/standardize-i18n-usage.js
@@ -147,51 +147,51 @@ class I18nStandardizer {
     }
     
     return content;
   }
 
   ensureLoadTranslationsCall(content) {
     // Check if loadTranslations call already exists
     if (content.includes('loadTranslations(')) {
       return content;
     }
     
     // Add loadTranslations call after the import
     const lines = content.split('\n');
     let insertIndex = -1;
     
     // Find the i18n-helper import line
     for (let i = 0; i < lines.length; i++) {
       if (lines[i].includes("require('../utils/i18n-helper')") || 
           lines[i].includes("require('../../utils/i18n-helper')")) {
         insertIndex = i + 1;
         break;
       }
     }
     
     if (insertIndex !== -1) {
-      lines.splice(insertIndex, 0, "loadTranslations(process.env.I18NTK_LANG || 'en');");
+      lines.splice(insertIndex, 0, "loadTranslations(process.env.I18NTK_LANG);");
       return lines.join('\n');
     }
     
     return content;
   }
 
   convertUiTCalls(content) {
     // Convert this.ui.t(...) to t(...)
     return content.replace(/this\.ui\.t\(/g, 't(');
   }
 
   convertStandaloneUiTCalls(content) {
     // Convert ui.t(...) or uiI18n.t(...) to t(...)
     // Be careful not to match console.log(ui.t(...)) patterns
     let modified = content;
     
     // Match patterns like: uiI18n.t(, ui.t( but not this.ui.t(
     modified = modified.replace(/(?<!this\.)ui\.t\(/g, 't(');
     modified = modified.replace(/uiI18n\.t\(/g, 't(');
     
     return modified;
   }
 
   optimizeUIi18nUsage(content, filePath) {
     let modified = content;
diff --git a/docs/README.md b/docs/README.md
index 07118f94728a268a11330760b937b0fc781b964c..25507d324bf03c648a947b197603803313a74689 100644
--- a/docs/README.md
+++ b/docs/README.md
@@ -1,32 +1,32 @@
 # Documentation Overview
 
 **Version:** 1.7.1
 **Last Updated:** 2025-08-10
 **GitHub Repository:** [vladnoskv/i18ntk](https://github.com/vladnoskv/i18ntk)
 
-Version 1.7.1 introduces enhanced security logging, flexible 4-6 digit PIN authentication, configuration stability improvements, and CI/CD silent mode support.
+Version 1.7.1 introduces enhanced security logging, flexible 4-6 digit PIN authentication, configuration stability improvements, CI/CD silent mode support, and immediate language preference loading.
 
 ## Structure
 
 ### Core Guides
 - [Installation Guide](./INSTALLATION.md) - Detailed installation instructions
 - [PIN Protection Guide](./PIN_PROTECTION_GUIDE.md) - Configure PIN-based security
 - [Ultra Performance Guide](./ULTRA_PERFORMANCE_GUIDE.md) - Optimize for maximum speed
 
 ### Reference
 - [API Reference](./api/API_REFERENCE.md) - Complete API documentation
 - [Configuration Guide](./api/CONFIGURATION.md) - Configuration options
 
 ### Development
 - [Development Rules](./development/DEVELOPMENT_RULES.md) - Coding standards and practices
 - [AI Agent Guidelines](./development/AGENTS.md) - Instructions for AI-assisted changes
 
 ### Additional Resources
  - [Release Notes](./release-notes/) - Version history and upgrade notes
  - [Reports](./reports/) - Analysis and validation reports
  - [Screenshots](./screenshots/) - Visual examples
  - [Version 1.6.3 Docs](./version-1.6.3/) - Archived documentation for v1.6.3 (deprecated)
  - [TODO & Roadmap](./TODO_ROADMAP.md) - Planned features and upcoming work
  - [License](./LICENSE) - MIT License information
  - [Contributing](./CONTRIBUTING.md) - Guidelines for contributing to i18ntk
  - [Development Scripts and Tools](./dev/) - Scripts and tools for development
diff --git a/docs/api/CONFIGURATION.md b/docs/api/CONFIGURATION.md
index a5fce1b185a7f1893e93f1bc925a75f68399c292..60c43a90eea6d4210a3b49d688614e91dcef9e4f 100644
--- a/docs/api/CONFIGURATION.md
+++ b/docs/api/CONFIGURATION.md
@@ -132,50 +132,51 @@ This guide provides comprehensive information about configuring the I18N Managem
     "i18ntk:validate": "npx i18ntk validate",
     "i18ntk:usage": "npx i18ntk usage",
     "i18ntk:complete": "npx i18ntk complete",
     "i18ntk:sizing": "npx i18ntk sizing",
     "i18ntk:summary": "npx i18ntk summary",
     "i18ntk:autorun": "npx i18ntk autorun"
   }
 }
 ```
 
 ## 🌍 Environment Variables
 
 ### Core Environment Variables
 
 | Variable | Description | Default | Example |
 |----------|-------------|---------|----------|
 | `I18N_SOURCE_DIR` | Source directory path | `./locales` | `./app/src` |
 | `I18N_LOCALES_DIR` | Locales directory path | `./locales` | `./public/locales` |
 | `I18N_DEFAULT_LANG` | Default language code | `en` | `en-US` |
 | `I18N_SUPPORTED_LANGS` | Supported languages (comma-separated) | `en,es,fr,de,ja,ru,zh` | `en,es,fr,de,ja,ru,zh` |
 | `I18N_FRAMEWORK` | i18n framework | `framework-agnostic` | `react-i18next`, `vue-i18n`, `angular`, `nextjs`, `vanilla` |
 | `I18N_STRICT_MODE` | Enable strict validation | `false` | `true` |
 | `I18N_AUTO_BACKUP` | Enable automatic backups | `true` | `false` |
 | `I18N_REPORT_FORMAT` | Default report format | `html` | `json` |
 | `I18N_UI_LANGUAGE` | UI language | `en` | `es` |
+| `I18NTK_LANG` | Override UI language for current run | *(none)* | `fr` |
 | `I18N_VERBOSE` | Enable verbose output | `false` | `true` |
 
 ### UI Language Configuration
 
 The toolkit now supports **runtime UI language switching** through the interactive menu. Configure your preferred UI language settings:
 
 | Variable | Description | Default | Example |
 |----------|-------------|---------|----------|
 | `I18N_UI_LANGUAGE` | Default UI language | `en` | `pt` |
 
 **Supported UI Languages:**
 - `en` - English (default)
 - `de` - German
 - `es` - Spanish
 - `fr` - French
 
 - `ja` - Japanese
 - `ru` - Russian
 - `zh` - Chinese
 
 **Runtime Language Switching:**
 Access the language switcher via the interactive menu:
 1. Run `npx i18ntk`
 2. Select **10. ⚙️ Settings**
 3. Choose **Change UI Language**
diff --git a/main/i18ntk-analyze.js b/main/i18ntk-analyze.js
index e28c56adb538b6fe652b769b3cebeb2b85e7b5aa..949ba8e07ad046e13edddd31ad681e6e4239b848 100644
--- a/main/i18ntk-analyze.js
+++ b/main/i18ntk-analyze.js
@@ -1,39 +1,39 @@
 #!/usr/bin/env node
 /**
  * I18N TRANSLATION ANALYSIS SCRIPT
  * 
  * This script analyzes translation files to identify missing translations,
  * inconsistencies, and provides detailed reports for each language.
  * 
  */
 
 const fs = require('fs');
 const path = require('path');
 const cliHelper = require('../utils/cli-helper');
 const { loadTranslations, t } = require('../utils/i18n-helper');
-loadTranslations(process.env.I18NTK_LANG || 'en');
+loadTranslations(process.env.I18NTK_LANG);
 const { getUnifiedConfig, parseCommonArgs, displayHelp } = require('../utils/config-helper');
 const SecurityUtils = require('../utils/security');
 const AdminCLI = require('../utils/admin-cli');
 const watchLocales = require('../utils/watch-locales');
 
 const PROJECT_ROOT = process.cwd();
 
 class I18nAnalyzer {
   constructor(config = {}) {
     this.config = config;
     
     // Don't set defaults here - let getUnifiedConfig handle it
     // This ensures we use the configuration from settings files
   }
 
   async initialize() {
     try {
       const args = this.parseArgs();
       if (args.help) {
         displayHelp('i18ntk-analyze', {
           'language': 'Analyze specific language only',
           'output-reports': 'Generate detailed reports',
           'setup-admin': 'Configure admin PIN protection',
           'disable-admin': 'Disable admin PIN protection',
           'admin-status': 'Check admin PIN status'
diff --git a/main/i18ntk-autorun.js b/main/i18ntk-autorun.js
index c5f5cdfce125759cf12e7cedc1e4cd4fd1269ba4..2fbd9f6ff96166a27d867f919e015e6ad5eaf3b2 100644
--- a/main/i18ntk-autorun.js
+++ b/main/i18ntk-autorun.js
@@ -1,42 +1,42 @@
 #!/usr/bin/env node
 
 /**
  * i18n Toolkit - Automated Workflow Runner (1.6.3-ready)
  * Executes predefined workflow steps for i18n management.
  * - Deterministic translation loading
  * - Safe config precedence (defaults < constructor < unified/CLI)
  * - Windows-safe child process execution via spawnSync
  * - Optional step filtering via --steps=analyze,validate
  * - Uses equals-style args (e.g., --output-dir=path) expected by sub-scripts
  */
 
 const fs = require('fs');
 const path = require('path');
 const { spawnSync } = require('child_process');
 const { loadTranslations, t } = require('../utils/i18n-helper');
-loadTranslations(process.env.I18NTK_LANG || 'en');
+loadTranslations(process.env.I18NTK_LANG);
 const { getUnifiedConfig, parseCommonArgs, displayHelp, ensureInitialized } = require('../utils/config-helper');
 const SecurityUtils = require('../utils/security');
 const configManager = require('../utils/config-manager');
 
 // Default location for UI locale bundles (override via config.uiLocalesDir)
 const UI_LOCALES_DIR = path.resolve(__dirname, '..', 'ui-locales');
 
 class AutoRunner {
   constructor(config = {}) {
     this.CONFIG_FILE = configManager.CONFIG_PATH;
     this.DEFAULT_CONFIG = {
       steps: [
         { name: 'autorun.stepInitializeProject',  script: 'i18ntk-init.js',     description: 'autorun.stepInitializeProject' },
         { name: 'autorun.stepAnalyzeTranslations', script: 'i18ntk-analyze.js',  description: 'autorun.stepAnalyzeTranslations' },
         { name: 'autorun.stepValidateTranslations', script: 'i18ntk-validate.js', description: 'autorun.stepValidateTranslations' },
         { name: 'autorun.stepCheckUsage',           script: 'i18ntk-usage.js',    description: 'autorun.stepCheckUsage' },
         { name: 'autorun.stepGenerateSummary',      script: 'i18ntk-summary.js',  description: 'autorun.stepGenerateSummary' }
       ]
     };
     // Ensure config is always initialized
     this.config = { ...this.DEFAULT_CONFIG, ...(config || {}) };
   }
 
   /** Initialize config and translations BEFORE any output that calls t() */
   async init(args = {}) {
diff --git a/main/i18ntk-complete.js b/main/i18ntk-complete.js
index ce663e1b838d50f632456715e80ae396b52a887e..a84031af85112e517cd8a2aa250533910e0e7f4f 100644
--- a/main/i18ntk-complete.js
+++ b/main/i18ntk-complete.js
@@ -1,45 +1,45 @@
 #!/usr/bin/env node
 /**
  * I18N TRANSLATION COMPLETION SCRIPT
  * 
  * This script automatically adds missing translation keys to achieve 100% coverage.
  * It reads the usage analysis and adds all missing keys with proper markers.
  * 
  * Usage:
  *   node i18ntk-complete.js
  *   node i18ntk-complete.js --auto-translate
  *   node i18ntk-complete.js --source-dir=./src/i18n/locales
  */
 
 const fs = require('fs');
 const path = require('path');
 const { execSync } = require('child_process');
 const SecurityUtils = require('../utils/security');
 const { getUnifiedConfig, parseCommonArgs, displayHelp } = require('../utils/config-helper');
 const { loadTranslations, t } = require('../utils/i18n-helper');
-loadTranslations(process.env.I18NTK_LANG || 'en');
+loadTranslations(process.env.I18NTK_LANG);
 const { getGlobalReadline, closeGlobalReadline } = require('../utils/cli');
 
 
 
 class I18nCompletionTool {
   constructor(config = {}) {
     this.config = config;
     this.sourceDir = null;
     this.sourceLanguageDir = null;
     this.rl = null;
     
     // Initialize UI i18n for console messages
     const UIi18n = require('./i18ntk-ui');
     // Using shared t() helper from i18n-helper instead of UIi18n for translations
     // Using shared t() helper from i18n-helper
   }
   
   async initialize() {
     try {
       const args = this.parseArgs();
       if (args.help) {
         displayHelp('i18ntk-complete', {
           'auto-translate': 'Enable automatic translation suggestions',
           'dry-run': 'Preview changes without applying them'
         });
diff --git a/main/i18ntk-init.js b/main/i18ntk-init.js
index 34a6799bcd920a376dab14a76d64d4e0547c5707..4a470f7f9c866f6d73c8d7ffca97f6ea211f7428 100644
--- a/main/i18ntk-init.js
+++ b/main/i18ntk-init.js
@@ -1,48 +1,48 @@
 #!/usr/bin/env node
 /**
  * I18N INITIALIZATION SCRIPT
  * 
  * This script initializes a new i18n project or adds new languages to an existing one.
  * It uses the English (en) locale as the source of truth and generates translation files
  * for specified languages with proper structure and __NOT_TRANSLATED__ markers.
  * 
  * Usage:
  *   node scripts/i18n/01-init-i18n.js
  *   node scripts/i18n/01-init-i18n.js --languages=de,es,fr,ru
  *   node scripts/i18n/01-init-i18n.js --source-dir=./src/i18n/locales --target-languages=de,es
  */
 
 const fs = require('fs');
 const path = require('path');
 const configManager = require('../utils/config-manager');
 const SecurityUtils = require('../utils/security');
 const AdminAuth = require('../utils/admin-auth');
 const { loadTranslations, t } = require('../utils/i18n-helper');
 // Ensure UIi18n is available for this initializer class
 const UIi18n = require('./i18ntk-ui');
-loadTranslations(process.env.I18NTK_LANG || 'en');
+loadTranslations(process.env.I18NTK_LANG);
 const { getUnifiedConfig, parseCommonArgs, displayHelp } = require('../utils/config-helper');
 const { showFrameworkWarningOnce } = require('../utils/cli-helper');
 
 // Language configurations with native names
 const LANGUAGE_CONFIG = {
   'de': { name: 'German', nativeName: 'Deutsch' },
   'es': { name: 'Spanish', nativeName: 'Español' },
   'fr': { name: 'French', nativeName: 'Français' },
   'ru': { name: 'Russian', nativeName: 'Русский' },
   'it': { name: 'Italian', nativeName: 'Italiano' },
   'ja': { name: 'Japanese', nativeName: '日本語' },
   'ko': { name: 'Korean', nativeName: '한국어' },
   'zh': { name: 'Chinese', nativeName: '中文' },
   'ar': { name: 'Arabic', nativeName: 'العربية' },
   'hi': { name: 'Hindi', nativeName: 'हिन्दी' },
   'nl': { name: 'Dutch', nativeName: 'Nederlands' },
   'sv': { name: 'Swedish', nativeName: 'Svenska' },
   'da': { name: 'Danish', nativeName: 'Dansk' },
   'no': { name: 'Norwegian', nativeName: 'Norsk' },
   'fi': { name: 'Finnish', nativeName: 'Suomi' },
   'pl': { name: 'Polish', nativeName: 'Polski' },
   'cs': { name: 'Czech', nativeName: 'Čeština' },
   'hu': { name: 'Hungarian', nativeName: 'Magyar' },
   'tr': { name: 'Turkish', nativeName: 'Türkçe' }
 };
diff --git a/main/i18ntk-manage.js b/main/i18ntk-manage.js
index 608b072f28abf93808ae66f87f2ba638c6b54dc2..7794551b2b5f6bbaa1f85db74de54e59cca3e648 100644
--- a/main/i18ntk-manage.js
+++ b/main/i18ntk-manage.js
@@ -13,51 +13,51 @@
  *   npm run i18ntk:manage -- --command=usage
  *   npm run i18ntk:manage -- --help
  * 
  * Alternative direct usage:
  *   node i18ntk-manage.js
  *   node i18ntk-manage.js --command=init
  */
 
 const fs = require('fs');
 const path = require('path');
 const UIi18n = require('./i18ntk-ui');
 const AdminAuth = require('../utils/admin-auth');
 const SecurityUtils = require('../utils/security');
 const AdminCLI = require('../utils/admin-cli');
 const configManager = require('../settings/settings-manager');
 const { showFrameworkWarningOnce } = require('../utils/cli-helper');
 const I18nInitializer = require('./i18ntk-init');
 const { I18nAnalyzer } = require('./i18ntk-analyze');
 const I18nValidator = require('./i18ntk-validate');
 const I18nUsageAnalyzer = require('./i18ntk-usage');
 const I18nSizingAnalyzer = require('./i18ntk-sizing');
 const SettingsCLI = require('../settings/settings-cli');
 const I18nDebugger = require('../scripts/debug/debugger');
 
 const { loadTranslations, t, refreshLanguageFromSettings} = require('../utils/i18n-helper');
-loadTranslations(process.env.I18NTK_LANG || 'en');
+loadTranslations(process.env.I18NTK_LANG);
 const cliHelper = require('../utils/cli-helper');
 const { loadConfig, saveConfig, ensureConfigDefaults } = require('../utils/config');
 const pkg = require('../package.json');
 
 async function runInitFlow(rl) {
   const initializer = new I18nInitializer();
   await initializer.run({ fromMenu: true });
   const settings = configManager.loadSettings ? configManager.loadSettings() : (configManager.getConfig ? configManager.getConfig() : {});
   return { i18nDir: settings.i18nDir, sourceDir: settings.sourceDir };
 }
 
 function askYesNo(rl, prompt) {
   return new Promise(res => {
     rl.question(prompt, a => res(/^y(es)?$/i.test(a.trim())));
   });
 }
 
 async function ensureInitializedOrExit(rl) {
   const path = require('path');
   const fs = require('fs');
   const { ensureDirectory } = require('../utils/config-helper');
   const settingsManager = require('../settings/settings-manager');
   
   // Get configuration from settings manager
   const settings = settingsManager.getAllSettings();
diff --git a/main/i18ntk-sizing.js b/main/i18ntk-sizing.js
index 99fbf9338f0cb301de68b59c18a5c076411a9b4e..b8c194a8588f129001d433bdd9648e6664bcbcdf 100644
--- a/main/i18ntk-sizing.js
+++ b/main/i18ntk-sizing.js
@@ -13,51 +13,51 @@
  * - UI layout impact assessment
  * - Size optimization recommendations
  * 
  * Usage:
  *   i18ntk sizing [options]
  *   
  * Options:
  *   --source-dir <dir>     Source directory containing translation files (default: ./locales)
  *   --languages <langs>    Comma-separated list of languages to analyze (default: all)
  *   --output-report        Generate detailed sizing report
  *   --format <format>      Output format: json, csv, table (default: table)
  *   --threshold <number>   Size difference threshold for warnings (default: 50%)
  *   --detailed             Generate detailed report with more information
  *   --help                 Show this help message
  * 
  * Examples:
  *   i18ntk sizing --output-report
  *   i18ntk sizing --languages=en,de,fr --format=json
  *   i18ntk sizing --threshold=30 --output-report
  */
 
 const fs = require('fs');
 const path = require('path');
 const { performance } = require('perf_hooks');
 const { loadTranslations, t } = require('../utils/i18n-helper');
-loadTranslations(process.env.I18NTK_LANG || 'en');
+loadTranslations(process.env.I18NTK_LANG);
 const configManager = require('../settings/settings-manager');
 const SecurityUtils = require('../utils/security');
 const { getUnifiedConfig } = require('../utils/config-helper');
 const { getGlobalReadline, closeGlobalReadline } = require('../utils/cli');
 
 // Get configuration from settings manager
 function getConfig() {
   const settings = configManager.loadSettings ? configManager.loadSettings() : (configManager.getConfig ? configManager.getConfig() : {});
   
   // Check for per-script directory override, fallback to global sourceDir
   const sourceDir = settings.scriptDirectories?.sizing || settings.sourceDir || './locales';
   
   return {
     projectRoot: settings.projectRoot || '.',
     sourceDir: sourceDir,
     i18nDir: settings.i18nDir || settings.sourceDir || './locales',
     outputDir: settings.outputDir || './i18ntk-reports',
     threshold: settings.processing?.sizingThreshold || 50,
     uiLanguage: settings.language || 'en'
   };
 }
 
 class I18nSizingAnalyzer {
   constructor(options = {}) {
     const config = getConfig();
diff --git a/main/i18ntk-summary.js b/main/i18ntk-summary.js
index 3b51765df17411cd1795e1a5150aa9d59024e17b..9bf2ce61b0eed426249b57d040782fd277228439 100644
--- a/main/i18ntk-summary.js
+++ b/main/i18ntk-summary.js
@@ -1,31 +1,31 @@
 #!/usr/bin/env node
 
 const fs = require('fs');
 const path = require('path');
 const { loadTranslations, t } = require('../utils/i18n-helper');
-loadTranslations(process.env.I18NTK_LANG || 'en');
+loadTranslations(process.env.I18NTK_LANG);
 const { getUnifiedConfig, parseCommonArgs, displayHelp } = require('../utils/config-helper');
 const SecurityUtils = require('../utils/security');
 const AdminCLI = require('../utils/admin-cli');
 const { getGlobalReadline, closeGlobalReadline } = require('../utils/cli');
 
 
 class I18nSummaryReporter {
   constructor() {
     this.config = null; // Will be set from getUnifiedConfig
     this.stats = {
       languages: [],
       totalFiles: 0,
       totalKeys: 0,
       keysByLanguage: {},
       filesByLanguage: {},
       fileSizes: {},
       folderSizes: {},
       missingFiles: [],
       inconsistentKeys: [],
       emptyFiles: [],
       malformedFiles: [],
       duplicateKeys: []
     };
     this.rl = null;
   }
diff --git a/main/i18ntk-usage.js b/main/i18ntk-usage.js
index 1efd95186481eecaf6a834aaf0747ed2d768a21f..71076af47979adf1974e17f8c2427a3aa3992061 100644
--- a/main/i18ntk-usage.js
+++ b/main/i18ntk-usage.js
@@ -3,51 +3,51 @@
  * I18N USAGE ANALYSIS TOOLKIT - Version 1.6.3
  * 
  * This script analyzes source code to find unused translation keys,
  * missing translations, and provides comprehensive translation completeness analysis.
  * 
  * NEW in v1.6.3:
  * - Modular folder structure support
  * - Recursive translation file discovery
  * - NOT_TRANSLATED analysis
  * - Enhanced reporting with completeness statistics
  * 
  * Usage:
  *   npm run i18ntk:usage
  *   npm run i18ntk:usage -- --source-dir=./src
  *   npm run i18ntk:usage -- --i18n-dir=./src/i18n/locales
  *   npm run i18ntk:usage -- --output-report
  * 
  * Alternative direct usage:
  *   node i18ntk-usage.js
  */
 
 const fs = require('fs');
 const path = require('path');
 const { loadTranslations, t } = require('../utils/i18n-helper');
 const { getGlobalReadline, closeGlobalReadline, askHidden } = require('../utils/cli');
-loadTranslations(process.env.I18NTK_LANG || 'en');
+loadTranslations(process.env.I18NTK_LANG);
 const configManager = require('../utils/config-manager');
 const SecurityUtils = require('../utils/security');
 const AdminCLI = require('../utils/admin-cli');
 
 const { getUnifiedConfig, parseCommonArgs, displayHelp, validateSourceDir, displayPaths } = require('../utils/config-helper');
 const I18nInitializer = require('./i18ntk-init');
 
 async function getConfig() {
   return await getUnifiedConfig('usage');
 }
 
 class I18nUsageAnalyzer {
   constructor(config = {}) {
     this.config = config;
     this.sourceDir = null;
     this.i18nDir = null;
     this.sourceLanguageDir = null;
     
     // Initialize class properties
     this.availableKeys = new Set();
     this.usedKeys = new Set();
     this.fileUsage = new Map();
     this.translationFiles = new Map(); // New: Track all translation files
     this.translationStats = new Map(); // New: Track translation completeness
     
diff --git a/main/i18ntk-validate.js b/main/i18ntk-validate.js
index d5bc7c8adab48f54351d1cf4f2531e0d595d6ff1..94373b84ce5b6746a7ed0eff535bb68689850152 100644
--- a/main/i18ntk-validate.js
+++ b/main/i18ntk-validate.js
@@ -16,51 +16,51 @@ if (isUppercase) {
   console.error('   npx i18ntk init --languages=de,es');
   console.error('   npm run i18ntk:manage');
   console.error('');
   console.error('📖 For more information, run: npx i18ntk --help');
   process.exit(1);
 }
 /**
  * I18N TRANSLATION VALIDATION TOOLKIT
  * 
  * This script validates translation files for completeness, consistency,
  * and structural integrity across all languages.
  * 
  * Usage:
  *   npm run i18ntk:validate
  *   npm run i18ntk:validate -- --strict
  *   npm run i18ntk:validate -- --language=de
  *   npm run i18ntk:validate -- --source-dir=./src/i18n/locales
  * 
  * Alternative direct usage:
  *   node i18ntk-validate.js
  */
 
 const fs = require('fs');
 const path = require('path');
 const { loadTranslations, t } = require('../utils/i18n-helper');
-loadTranslations(process.env.I18NTK_LANG || 'en');
+loadTranslations(process.env.I18NTK_LANG);
 const configManager = require('../utils/config-manager');
 const SecurityUtils = require('../utils/security');
 const AdminCLI = require('../utils/admin-cli');
 const watchLocales = require('../utils/watch-locales');
 const { getGlobalReadline, closeGlobalReadline } = require('../utils/cli');
 
 const { getUnifiedConfig, parseCommonArgs, displayHelp, validateSourceDir, displayPaths } = require('../utils/config-helper');
 const I18nInitializer = require('./i18ntk-init');
 
 class I18nValidator {
   constructor(config = {}) {
     this.config = config;
     this.errors = [];
     this.warnings = [];
     this.rl = null;
   }
   
   async initialize() {
     try {
       // Initialize i18n with UI language first
       const args = this.parseArgs();
       if (args.help) {
         displayHelp('i18ntk-validate', {
           'setup-admin': 'Configure admin PIN protection',
           'disable-admin': 'Disable admin PIN protection',
diff --git a/settings/settings-cli.js b/settings/settings-cli.js
index f71af4b1a428843f8b5c85a968602339f3c9af2e..c39936331b86429cbc6ce8d6f548c04f4fbe7777 100644
--- a/settings/settings-cli.js
+++ b/settings/settings-cli.js
@@ -1,39 +1,39 @@
 /**
  * Settings CLI Interface
  * Interactive terminal-based settings management for i18n toolkit
  * No external dependencies - uses Node.js built-in readline
  */
 
 const cliHelper = require('../utils/cli-helper');
 const fs = require('fs');
 const path = require('path');
 const settingsManager = require('./settings-manager');
 const UIi18n = require('../main/i18ntk-ui');
 const configManager = require('../utils/config-manager');
 const { loadTranslations, t } = require('../utils/i18n-helper');
-loadTranslations(process.env.I18NTK_LANG || 'en');
+loadTranslations(process.env.I18NTK_LANG);
 
 const AdminAuth = require('../utils/admin-auth');
 const uiI18n = new UIi18n();
 
 // ANSI color codes for terminal output
 const colors = {
     reset: '\x1b[0m',
     bright: '\x1b[1m',
     dim: '\x1b[2m',
     red: '\x1b[31m',
     green: '\x1b[32m',
     yellow: '\x1b[33m',
     blue: '\x1b[34m',
     magenta: '\x1b[35m',
     cyan: '\x1b[36m',
     white: '\x1b[37m',
     bgRed: '\x1b[41m',
     bgGreen: '\x1b[42m',
     bgYellow: '\x1b[43m'
 };
 
 function isAdminPinEnabled() {
     const cfg = configManager.getConfig();
     return cfg.security?.adminPinEnabled || false;
 }
 
EOF
)